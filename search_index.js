var search_data = {
    'index': {
        'searchIndex': ["syngr","syngr\\arr","syngr\\number","syngr\\object","syngr\\string","syngr\\arr::__construct","syngr\\arr::__tostring","syngr\\number::__construct","syngr\\number::__tostring","syngr\\number::value","syngr\\number::random","syngr\\number::absolute","syngr\\number::ceiling","syngr\\number::floor","syngr\\number::round","syngr\\number::max","syngr\\number::min","syngr\\number::sqrt","syngr\\number::exp","syngr\\number::log","syngr\\number::pow","syngr\\number::cos","syngr\\number::sin","syngr\\number::tan","syngr\\number::is_finite","syngr\\number::is_infinite","syngr\\number::is_nan","syngr\\object::__construct","syngr\\string::__construct","syngr\\string::__tostring","syngr\\string::length","syngr\\string::join","syngr\\string::split","syngr\\string::match","syngr\\string::utf8_encode","syngr\\string::utf8_decode","syngr\\string::hash","syngr\\string::html_decode","syngr\\string::html_encode","syngr\\string::substring","syngr\\string::trim","syngr\\string::uppercase","syngr\\string::lowercase","syngr\\string::pad","syngr\\string::reverse","syngr\\string::replace","syngr\\string::is_regex"],
        'info': [["Syngr","","Syngr.html","","",3],["Arr","Syngr","Syngr\/Arr.html"," < ArrayObject","",1],["Number","Syngr","Syngr\/Number.html"," < Object","",1],["Object","Syngr","Syngr\/Object.html","","",1],["String","Syngr","Syngr\/String.html"," < Object","",1],["Arr::__construct","Syngr\\Arr","Syngr\/Arr.html#method___construct","(string $array = null)","Constructor function for string object",2],["Arr::__toString","Syngr\\Arr","Syngr\/Arr.html#method___toString","()","Overrides __toString()",2],["Number::__construct","Syngr\\Number","Syngr\/Number.html#method___construct","(string $number)","Constructor function for string object",2],["Number::__toString","Syngr\\Number","Syngr\/Number.html#method___toString","()","Overrides __toString()",2],["Number::value","Syngr\\Number","Syngr\/Number.html#method_value","()","Returns raw value of Number",2],["Number::random","Syngr\\Number","Syngr\/Number.html#method_random","(integer $min, integer $max = null)","Returns a random number, can also generate a random",2],["Number::absolute","Syngr\\Number","Syngr\/Number.html#method_absolute","()","Returns absolute value of an integer\/double",2],["Number::ceiling","Syngr\\Number","Syngr\/Number.html#method_ceiling","()","Returns rounded-up value of number",2],["Number::floor","Syngr\\Number","Syngr\/Number.html#method_floor","()","Returns rounded-down value of number",2],["Number::round","Syngr\\Number","Syngr\/Number.html#method_round","(integer $precision)","Rounds a decimal value to specified amount of decimal",2],["Number::max","Syngr\\Number","Syngr\/Number.html#method_max","(array $values)","Returns highest value in array",2],["Number::min","Syngr\\Number","Syngr\/Number.html#method_min","(array $values)","Returns lowest value in array",2],["Number::sqrt","Syngr\\Number","Syngr\/Number.html#method_sqrt","()","Returns square root of number",2],["Number::exp","Syngr\\Number","Syngr\/Number.html#method_exp","($power)","",2],["Number::log","Syngr\\Number","Syngr\/Number.html#method_log","($base = 10)","",2],["Number::pow","Syngr\\Number","Syngr\/Number.html#method_pow","($exponent = 1)","",2],["Number::cos","Syngr\\Number","Syngr\/Number.html#method_cos","($flags = array())","",2],["Number::sin","Syngr\\Number","Syngr\/Number.html#method_sin","($flags = array())","",2],["Number::tan","Syngr\\Number","Syngr\/Number.html#method_tan","($flags = array())","",2],["Number::is_finite","Syngr\\Number","Syngr\/Number.html#method_is_finite","()","Checks to see whether vslue is finite",2],["Number::is_infinite","Syngr\\Number","Syngr\/Number.html#method_is_infinite","()","Checks to see whether value is infinite",2],["Number::is_nan","Syngr\\Number","Syngr\/Number.html#method_is_nan","()","Checks to see if value is Not-A-Number (NAN)",2],["Object::__construct","Syngr\\Object","Syngr\/Object.html#method___construct","(mixed $content = null)","Constructor",2],["String::__construct","Syngr\\String","Syngr\/String.html#method___construct","(string $string = &#039;&#039;)","Constructor",2],["String::__toString","Syngr\\String","Syngr\/String.html#method___toString","()","Overrides __toString()",2],["String::length","Syngr\\String","Syngr\/String.html#method_length","()","Gets length of string",2],["String::join","Syngr\\String","Syngr\/String.html#method_join","($delimiter = &#039;&#039;, $data)","",2],["String::split","Syngr\\String","Syngr\/String.html#method_split","($splitter)","",2],["String::match","Syngr\\String","Syngr\/String.html#method_match","($match_string, $flags = array())","",2],["String::utf8_encode","Syngr\\String","Syngr\/String.html#method_utf8_encode","()","",2],["String::utf8_decode","Syngr\\String","Syngr\/String.html#method_utf8_decode","()","",2],["String::hash","Syngr\\String","Syngr\/String.html#method_hash","(string $algorithm = &#039;MD5&#039;)","Returns a hash of the current string in the specified",2],["String::html_decode","Syngr\\String","Syngr\/String.html#method_html_decode","()","",2],["String::html_encode","Syngr\\String","Syngr\/String.html#method_html_encode","()","",2],["String::substring","Syngr\\String","Syngr\/String.html#method_substring","(int $start, int $length = null)","Returns portion of the string",2],["String::trim","Syngr\\String","Syngr\/String.html#method_trim","($delimiter = &#039; &#039;, $flags = array())","",2],["String::uppercase","Syngr\\String","Syngr\/String.html#method_uppercase","()","Switches all characters in string into uppercase",2],["String::lowercase","Syngr\\String","Syngr\/String.html#method_lowercase","()","Switches all characters in string into lowercase",2],["String::pad","Syngr\\String","Syngr\/String.html#method_pad","($length, $delimiter = &#039; &#039;, $flags = array())","",2],["String::reverse","Syngr\\String","Syngr\/String.html#method_reverse","()","Reverses the order of characters in a string",2],["String::replace","Syngr\\String","Syngr\/String.html#method_replace","($search, $replace, $flags = array())","",2],["String::is_regex","Syngr\\String","Syngr\/String.html#method_is_regex","(string $regex)","Crude method to check for valid regex",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']